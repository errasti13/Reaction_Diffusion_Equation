%-------------------------------------------------------------------------%
% Solving Adimensional Chemical Reaction-Diffusion Equation               %
%-------------------------------------------------------------------------%
% This MATLAB script solves the adimensional chemical reaction-diffusion  %
% equation for varying values of the Peclet number. The equation describes%
% the concentration profile of a chemical species undergoing reaction and %
% diffusion in a one-dimensional domain. The script uses the ode45 solver %
% to integrate the equation and produces plots of the concentration and   %
% normalized reaction rate.                                              %
%                                                                         %
% Author: [Your Name]                                                    %
% Date: [Date]                                                           %
%-------------------------------------------------------------------------%
%-------------------------------------------------------------------------%

% Clear the workspace and command window
clear
clc

% Initialize variables
count = 0;
Pec = 0.056;
error = 1;

% Constants
beta = 25;
Q = 1;
Da = 1;

% Perform calculations until error threshold is met
while (error > 10^-3)
    % Increment Peclet number
    Pec = Pec + 0.0001;
    count = count + 1;

    % Define the differential equation using symbolic variables
    syms y(t)
    diff_eq = diff(y, 2) == Pec * diff(y, 1) + Da * y * exp(-beta * y * (1 + Q) / (1 + Q * (1 - y)));
    [V] = odeToVectorField(diff_eq);
    V1 = V(1, 1);
    V2 = V(2, 1);
    
    % Convert the differential equation to a function handle
    M = matlabFunction(V, 'vars', {'t', 'Y'});
    
    % Set ODE solver options
    options = odeset('MaxStep', 0.01);
    
    % Solve the differential equation using ode45
    sol = ode45(M, [100, -100], [0.00001, 0], options);

    % Calculate error and check if it meets the threshold
    C_inf = sol.y(1, end);
    error = abs(C_inf(1) - 1);

    disp(error)
    disp(Pec)
end

% Calculate omega and normalize it
omega = sol.y(1, :) .* exp(-beta .* (sol.y(1, :) .* (1 + Q) ./ (1 + Q * (1 - sol.y(1, :)))));
omega = omega / max(omega);

% Calculate temperature adimensional
T = (1 - sol.y(1, :)) * Q + 1;

%% Plotting
figure()
plot(sol.y(1, :), omega)
xlabel('$\mathcal{C}$', 'Interpreter', 'latex')
ylabel('$\frac{\Omega}{\Omega_{\max}}$', 'Interpreter', 'latex')
axis([0, 1, 0, 1])

figure()
plot(sol.x, sol.y(1, :))
ylabel('Concentraci√≥n adimensional de combustible')
axis([-100, 100, 0, 1])
hold on
yyaxis right
plot(sol.x, T)
xlabel('$\xi$', 'Interpreter', 'latex')
ylabel('$\mathcal{T}$''$\frac{\Omega}{\Omega_{\max}}$', 'Interpreter', 'latex')
title(['Solucion para Pe=', num2str(Pec)])
plot(sol.x, omega)
legend('$\mathcal{C}$', '$\mathcal{T}$', '$\frac{\Omega}{\Omega_{\max}}$', 'Interpreter', 'latex', 'FontSize', 18, 'Location', 'SouthWest');
